import logging
from tinkoff_api import TinkoffAPI
from config import FIGI

class TradingStrategy:
    def __init__(self, bot):
        self.api = TinkoffAPI()
        self.bot = bot
        self.position = self.load_position()
        self.last_buy_price = self.load_last_buy_price()

    def save_position(self, state: bool):
        with open("position.txt", "w") as f:
            f.write("1" if state else "0")

    def load_position(self) -> bool:
        try:
            with open("position.txt", "r") as f:
                return f.read().strip() == "1"
        except FileNotFoundError:
            return False

    def save_last_buy_price(self, price: float):
        with open("buy_price.txt", "w") as f:
            f.write(str(price))

    def load_last_buy_price(self) -> float:
        try:
            with open("buy_price.txt", "r") as f:
                return float(f.read().strip())
        except FileNotFoundError:
            return 0.0

    async def run(self):
        logging.info(f"[DEBUG] self.position = {self.position}")

        quantity = self.api.get_quantity(FIGI)
        if quantity > 0 and not self.position:
            self.position = True
            self.save_position(True)
            logging.info(f"üìå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ü–∏–∏ {FIGI} –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–∑–∏—Ü–∏—é = True")

        try:
            if not self.api.is_market_open():
                logging.info("üìâ –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç. –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                return

            rsi = self.api.get_rsi(FIGI)
            logging.info(f"[RSI] –ó–Ω–∞—á–µ–Ω–∏–µ RSI –¥–ª—è {FIGI}: {rsi}")
            await self.bot.send(f"[RSI] –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI: {rsi}")

            # ======= –£–°–õ–û–í–ò–ï –ù–ê –ü–û–ö–£–ü–ö–£ =======
            if rsi < 45 and not self.position:
                logging.info("üîî –£—Å–ª–æ–≤–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
                if await self.bot.ask_permission("RSI < 45. –ö—É–ø–∏—Ç—å?"):
                    balance = self.api.get_balance()
                    await self.bot.send(f"üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—á—ë—Ç–µ: {balance:.2f} ‚ÇΩ")
                    try:
                        price, max_qty = self.api.get_lot_price_and_max_quantity(FIGI, balance)
                        if max_qty == 0:
                            await self.bot.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–∞–∂–µ –Ω–∞ –æ–¥–∏–Ω –ª–æ—Ç.")
                            return
                        options = [str(i) for i in range(1, max_qty + 1)]
                        qty_str = await self.bot.ask_quantity("–°–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π –∫—É–ø–∏—Ç—å?", options)
                        if not qty_str:
                            await self.bot.send("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                            return
                        qty = int(qty_str)
                        price = self.api.buy(FIGI, qty)
                        if price:
                            self.save_last_buy_price(price)
                        self.save_position(True)
                        self.position = True
                        logging.info("–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ü–û–ö–£–ü–ö–ê")
                        await self.bot.send(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {qty} –∞–∫—Ü–∏–π –ø–æ —Ü–µ–Ω–µ {price:.2f} ‚ÇΩ")
                    except Exception as e:
                        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:")
                        await self.bot.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")

            # ======= –£–°–õ–û–í–ò–ï –ù–ê –ü–†–û–î–ê–ñ–£ =======
            if rsi > 60 and self.position:
                logging.info("üîî –£—Å–ª–æ–≤–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
                try:
                    quantity = self.api.get_quantity(FIGI)
                    if quantity == 0:
                        await self.bot.send("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
                        self.save_position(False)
                        return

                    current_price = self.api.get_last_price(FIGI)
                    profit_per_share = current_price - self.last_buy_price
                    total_profit = profit_per_share * quantity

                    msg = (
                        f"RSI > 60. –ü—Ä–æ–¥–∞—Ç—å?\n"
                        f"–ö—É–ø–∏–ª–∏: {self.last_buy_price:.2f} ‚ÇΩ\n"
                        f"–ü—Ä–æ–¥–∞–¥–∏–º: {current_price:.2f} ‚ÇΩ\n"
                        f"üìà –ü—Ä–∏–±—ã–ª—å: {total_profit:.2f} ‚ÇΩ"
                    )

                    if await self.bot.ask_permission(msg):
                        self.api.sell(FIGI, quantity)
                        self.save_position(False)
                        self.position = False
                        logging.info("–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ü–†–û–î–ê–ñ–ê")
                        await self.bot.send(
                            f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π –ø–æ —Ü–µ–Ω–µ {current_price:.2f} ‚ÇΩ\n"
                            f"üìà –ü—Ä–∏–±—ã–ª—å: {total_profit:.2f} ‚ÇΩ"
                        )
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ:")
            await self.bot.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {e}")
